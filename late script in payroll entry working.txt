open payroll_entry.py file from vs code 
add this script before create salary_slip_for_employee function 
comment the default code from create_salary_slips_for_employees to frappe.publish_realtime("completed_salary_slip_creation", user=frappe.session.user)

and paste the below given code


def get_number_of_late_days(employee, start_date, end_date):
    # Query Attendance records to count late entries
    late_entries = frappe.db.count('Attendance', filters={
        'employee': employee,
        'late_entry': 1,
        'attendance_date': ['between', [start_date, end_date]]
    })

    return late_entries

def create_salary_slips_for_employees(employees, args, publish_progress=True):
    payroll_entry = frappe.get_cached_doc("Payroll Entry", args.payroll_entry)

    try:
        salary_slips_exist_for = get_existing_salary_slips(employees, args)
        count = 0

        employees = list(set(employees) - set(salary_slips_exist_for))
        
        for emp in employees:
            # Calculate number of late days for the employee
            number_of_late_days = get_number_of_late_days(emp, args.start_date, args.end_date)
            args.update({"doctype": "Salary Slip", "employee": emp, "number_of_late_days": number_of_late_days})

            frappe.get_doc(args).insert()

            count += 1
            if publish_progress:
                frappe.publish_progress(
                    count * 100 / len(employees),
                    title=_("Creating Salary Slips..."),
                )

        payroll_entry.db_set({"status": "Submitted", "salary_slips_created": 1, "error_message": ""})

        if salary_slips_exist_for:
            frappe.msgprint(
                _(
                    "Salary Slips already exist for employees {}, and will not be processed by this payroll."
                ).format(frappe.bold(", ".join(emp for emp in salary_slips_exist_for))),
                title=_("Message"),
                indicator="orange",
            )

    except Exception as e:
        frappe.db.rollback()
        log_payroll_failure("creation", payroll_entry, e)

    finally:
        frappe.db.commit()
        frappe.publish_realtime("completed_salary_slip_creation", user=frappe.session.user)
